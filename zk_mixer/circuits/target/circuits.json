{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":17284449262759478540,"abi":{"parameters":[{"name":"root","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"recipient","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"merkle_proof","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"is_even","type":{"kind":"array","length":20,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"7d3BauMwFEbhd9E6C0uWLCevMpTiJE4xGCc4ycAQ5t3rlLjcn5p2XXJ2kX0l0EcWZ+eb27fb69trNxyOZ7f5c3P9cddcuuMwrW4uFB/PzqdmuC/Pl2a8uE1Z+ZVrh73bRO//r9yh61u3qaafX0dTNY+G4nM0pIXRkP36MRtyWX4/7HOeD/Z5nX4YLj5P9kVV2+GXlQv+Ce4YnuCO5dIdk4+PLSlVv/+O8QnumBbvWM1bKl/YO953VEs7cjGr5PzDvzuFcgbMBjD8UsAMh+Wo4bAcazgMR1nAYTk8HJYjwGE5SjgsR4TDciQ4LAdVKhxUqXBQpcJBlVqOSJUKB1UqHFSpcFClwhHhsBxUqXBQpcJBlQoHVSocVKnlSFSpcFClwkGVCgdVKhwRDstBlQoHVSocVKlwUKXCQZVajooqFQ6qVDioUuGgSoUjwmE5qFLhoEqFgyoVDqpUOKhSy5GpUuGgSoWDKhUOqlQ4IhyWgyoVDqpUOKhS4aBKhYMqtRw1VSocVKlwUKXCQZUKR4TDclClwkGVCgdVKhxUqXBQpZZjTZUKB1UqHFSpcFClwhHhsBxUqXBQpcJBlQoHVSocVKnl8AVZqh50qXoQpupBmapHxEM8aFP1IE7VgzpVD/JUPehT8fD0qXrQp+pBn6oHfaoeEQ/xoE/Vgz5VD/pUPehT9aBPxSPQp+pBn6oHfaoe9Kl6RDzEgz5Vj+U+rWePukjW42VabMeu77u3V/uRu+nx32bsmm3fPpaH67Azby//TvObef9pPO7a/XVs7yd9vJuOfwc=","file_map":{"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"61":{"source":"use std::hash::poseidon2;\nmod merkle_tree;\nfn main(\n    // Public inputs\n    root: pub Field,\n    nullifier_hash: pub Field,\n    recipient: pub Field,\n\n    // Private inputs\n    nullifier: Field,\n    secret: Field,\n    merkle_proof: [Field; 20],\n    is_even: [bool; 20],\n) {\n    // compute the commitment Poseidon(nullifier, secret)\n    let commitment: Field = poseidon2::Poseidon2::hash([nullifier, secret], 2);\n\n    // check that the nullifier matches the nullifier hash\n    let computed_nullifier_hash: Field = poseidon2::Poseidon2::hash([nullifier], 1);\n    assert(computed_nullifier_hash == nullifier_hash);\n    \n    // check that the commitment is in the Merkle tree\n    let computed_root: Field = merkle_tree::compute_merkle_root(commitment, merkle_proof, is_even);\n    assert(computed_root == root);\n\n    // let recipient_binding = recipient * recipient;\n    // assert(recipient_binding == recipient * recipient);\n}","path":"/Users/lumi/Documents/github/cryptography/intro-to-noir/zk_mixer/circuits/src/main.nr"},"62":{"source":"use std::hash::poseidon2;\n\npub fn compute_merkle_root(\n    leaf: Field,\n    merkle_proof: [Field; 20],\n    is_even: [bool; 20],\n) -> Field {\n    // temporary variable to store the hash for the current level we are working on\n    let mut hash: Field = leaf;\n    // increment through the levels\n    for i in 0..20 {\n        let (left, right) = if is_even[i] {\n            (hash, merkle_proof[i])\n        } else {\n            (merkle_proof[i], hash)\n        };\n        // compute the hash for the current level\n        hash = poseidon2::Poseidon2::\n        hash([left, right], 2);\n    }\n    // return the root of the Merkle tree\n    hash\n}","path":"/Users/lumi/Documents/github/cryptography/intro-to-noir/zk_mixer/circuits/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}